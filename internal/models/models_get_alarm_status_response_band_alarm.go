// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsGetAlarmStatusResponseBandAlarm models get alarm status response band alarm
//
// swagger:model models.GetAlarmStatusResponseBandAlarm
type ModelsGetAlarmStatusResponseBandAlarm struct {

	// calculated overall
	CalculatedOverall *ModelsBandCalculatedOverall `json:"calculatedOverall,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// max frequency
	MaxFrequency *ModelsGetAlarmStatusResponseFrequency `json:"maxFrequency,omitempty"`

	// min frequency
	MinFrequency *ModelsGetAlarmStatusResponseFrequency `json:"minFrequency,omitempty"`

	// The type values are available [here](/v1/docs/service#alarm-status-type).
	// Example: 2
	// Required: true
	// Maximum: 4
	// Minimum: 0
	Status *int32 `json:"status"`

	// triggering measurement
	// Example: 123e4567-e89b-12d3-a456-426614174000
	// Format: uuid
	TriggeringMeasurement strfmt.UUID `json:"triggeringMeasurement,omitempty"`
}

// Validate validates this models get alarm status response band alarm
func (m *ModelsGetAlarmStatusResponseBandAlarm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCalculatedOverall(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggeringMeasurement(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsGetAlarmStatusResponseBandAlarm) validateCalculatedOverall(formats strfmt.Registry) error {
	if swag.IsZero(m.CalculatedOverall) { // not required
		return nil
	}

	if m.CalculatedOverall != nil {
		if err := m.CalculatedOverall.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("calculatedOverall")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("calculatedOverall")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsGetAlarmStatusResponseBandAlarm) validateMaxFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxFrequency) { // not required
		return nil
	}

	if m.MaxFrequency != nil {
		if err := m.MaxFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxFrequency")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsGetAlarmStatusResponseBandAlarm) validateMinFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.MinFrequency) { // not required
		return nil
	}

	if m.MinFrequency != nil {
		if err := m.MinFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minFrequency")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsGetAlarmStatusResponseBandAlarm) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.MinimumInt("status", "body", int64(*m.Status), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("status", "body", int64(*m.Status), 4, false); err != nil {
		return err
	}

	return nil
}

func (m *ModelsGetAlarmStatusResponseBandAlarm) validateTriggeringMeasurement(formats strfmt.Registry) error {
	if swag.IsZero(m.TriggeringMeasurement) { // not required
		return nil
	}

	if err := validate.FormatOf("triggeringMeasurement", "body", "uuid", m.TriggeringMeasurement.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this models get alarm status response band alarm based on the context it is used
func (m *ModelsGetAlarmStatusResponseBandAlarm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCalculatedOverall(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMinFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsGetAlarmStatusResponseBandAlarm) contextValidateCalculatedOverall(ctx context.Context, formats strfmt.Registry) error {

	if m.CalculatedOverall != nil {
		if err := m.CalculatedOverall.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("calculatedOverall")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("calculatedOverall")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsGetAlarmStatusResponseBandAlarm) contextValidateMaxFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxFrequency != nil {
		if err := m.MaxFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxFrequency")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsGetAlarmStatusResponseBandAlarm) contextValidateMinFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.MinFrequency != nil {
		if err := m.MinFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minFrequency")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minFrequency")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsGetAlarmStatusResponseBandAlarm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsGetAlarmStatusResponseBandAlarm) UnmarshalBinary(b []byte) error {
	var res ModelsGetAlarmStatusResponseBandAlarm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
