// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsGetAlarmStatusResponseHALAlarm models get alarm status response h a l alarm
//
// swagger:model models.GetAlarmStatusResponseHALAlarm
type ModelsGetAlarmStatusResponseHALAlarm struct {

	// bearing
	Bearing *ModelsBearing `json:"bearing,omitempty"`

	// error description
	ErrorDescription *string `json:"errorDescription,omitempty"`

	// fault frequency
	FaultFrequency *float64 `json:"faultFrequency,omitempty"`

	// hal index
	HalIndex *float64 `json:"halIndex,omitempty"`

	// label
	// Example: 10x RPM
	// Required: true
	Label *string `json:"label"`

	// number of harmonics used
	NumberOfHarmonicsUsed *int64 `json:"numberOfHarmonicsUsed,omitempty"`

	// rpm factor
	RpmFactor *float64 `json:"rpmFactor,omitempty"`

	// The type values are available [here](/v1/docs/service#alarm-status-type).
	// Example: 2
	// Required: true
	// Maximum: 4
	// Minimum: 0
	Status *int32 `json:"status"`

	// triggering measurement
	// Example: 123e4567-e89b-12d3-a456-426614174000
	// Required: true
	// Format: uuid
	TriggeringMeasurement *strfmt.UUID `json:"triggeringMeasurement"`
}

// Validate validates this models get alarm status response h a l alarm
func (m *ModelsGetAlarmStatusResponseHALAlarm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBearing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggeringMeasurement(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsGetAlarmStatusResponseHALAlarm) validateBearing(formats strfmt.Registry) error {
	if swag.IsZero(m.Bearing) { // not required
		return nil
	}

	if m.Bearing != nil {
		if err := m.Bearing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bearing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bearing")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsGetAlarmStatusResponseHALAlarm) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *ModelsGetAlarmStatusResponseHALAlarm) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.MinimumInt("status", "body", int64(*m.Status), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("status", "body", int64(*m.Status), 4, false); err != nil {
		return err
	}

	return nil
}

func (m *ModelsGetAlarmStatusResponseHALAlarm) validateTriggeringMeasurement(formats strfmt.Registry) error {

	if err := validate.Required("triggeringMeasurement", "body", m.TriggeringMeasurement); err != nil {
		return err
	}

	if err := validate.FormatOf("triggeringMeasurement", "body", "uuid", m.TriggeringMeasurement.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this models get alarm status response h a l alarm based on the context it is used
func (m *ModelsGetAlarmStatusResponseHALAlarm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBearing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsGetAlarmStatusResponseHALAlarm) contextValidateBearing(ctx context.Context, formats strfmt.Registry) error {

	if m.Bearing != nil {
		if err := m.Bearing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bearing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bearing")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsGetAlarmStatusResponseHALAlarm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsGetAlarmStatusResponseHALAlarm) UnmarshalBinary(b []byte) error {
	var res ModelsGetAlarmStatusResponseHALAlarm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
