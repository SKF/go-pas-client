// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsDataPoint models data point
//
// swagger:model models.DataPoint
type ModelsDataPoint struct {

	// coordinate
	// Required: true
	Coordinate *ModelsCoordinate `json:"coordinate"`

	// x unit
	// Example: ms
	// Required: true
	XUnit *string `json:"xUnit"`

	// y unit
	// Example: mm/s
	// Required: true
	YUnit *string `json:"yUnit"`
}

// Validate validates this models data point
func (m *ModelsDataPoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCoordinate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsDataPoint) validateCoordinate(formats strfmt.Registry) error {

	if err := validate.Required("coordinate", "body", m.Coordinate); err != nil {
		return err
	}

	if m.Coordinate != nil {
		if err := m.Coordinate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coordinate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("coordinate")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsDataPoint) validateXUnit(formats strfmt.Registry) error {

	if err := validate.Required("xUnit", "body", m.XUnit); err != nil {
		return err
	}

	return nil
}

func (m *ModelsDataPoint) validateYUnit(formats strfmt.Registry) error {

	if err := validate.Required("yUnit", "body", m.YUnit); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this models data point based on the context it is used
func (m *ModelsDataPoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCoordinate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsDataPoint) contextValidateCoordinate(ctx context.Context, formats strfmt.Registry) error {

	if m.Coordinate != nil {
		if err := m.Coordinate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coordinate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("coordinate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsDataPoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsDataPoint) UnmarshalBinary(b []byte) error {
	var res ModelsDataPoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
