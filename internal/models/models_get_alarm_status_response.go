// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsGetAlarmStatusResponse models get alarm status response
//
// swagger:model models.GetAlarmStatusResponse
type ModelsGetAlarmStatusResponse struct {

	// band alarms
	BandAlarms []*ModelsGetAlarmStatusResponseBandAlarm `json:"bandAlarms,omitempty"`

	// external alarm
	ExternalAlarm *ModelsGetAlarmStatusResponseExternal `json:"externalAlarm,omitempty"`

	// hal alarms
	HalAlarms []*ModelsGetAlarmStatusResponseHALAlarm `json:"halAlarms,omitempty"`

	// inspection alarm
	InspectionAlarm *ModelsGetAlarmStatusResponseGeneric `json:"inspectionAlarm,omitempty"`

	// The alarm node ID.
	// Example: 123e4567-e89b-12d3-a456-426614174000
	// Required: true
	// Format: uuid
	NodeID *strfmt.UUID `json:"nodeId"`

	// overall alarm
	OverallAlarm *ModelsGetAlarmStatusResponseGeneric `json:"overallAlarm,omitempty"`

	// rate of change alarm
	RateOfChangeAlarm *ModelsGetAlarmStatusResponseGeneric `json:"rateOfChangeAlarm,omitempty"`

	// The type values are available [here](/v1/docs/service#alarm-status-type).
	// Example: 2
	// Required: true
	// Maximum: 4
	// Minimum: 0
	Status *int32 `json:"status"`

	// This is a timestamp represented as epoch in milliseconds.
	// Example: 1631267558299
	UpdatedAt int64 `json:"updatedAt"`
}

// Validate validates this models get alarm status response
func (m *ModelsGetAlarmStatusResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBandAlarms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalAlarm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHalAlarms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInspectionAlarm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverallAlarm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateOfChangeAlarm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsGetAlarmStatusResponse) validateBandAlarms(formats strfmt.Registry) error {
	if swag.IsZero(m.BandAlarms) { // not required
		return nil
	}

	for i := 0; i < len(m.BandAlarms); i++ {
		if swag.IsZero(m.BandAlarms[i]) { // not required
			continue
		}

		if m.BandAlarms[i] != nil {
			if err := m.BandAlarms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bandAlarms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bandAlarms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsGetAlarmStatusResponse) validateExternalAlarm(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalAlarm) { // not required
		return nil
	}

	if m.ExternalAlarm != nil {
		if err := m.ExternalAlarm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalAlarm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externalAlarm")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsGetAlarmStatusResponse) validateHalAlarms(formats strfmt.Registry) error {
	if swag.IsZero(m.HalAlarms) { // not required
		return nil
	}

	for i := 0; i < len(m.HalAlarms); i++ {
		if swag.IsZero(m.HalAlarms[i]) { // not required
			continue
		}

		if m.HalAlarms[i] != nil {
			if err := m.HalAlarms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("halAlarms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("halAlarms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsGetAlarmStatusResponse) validateInspectionAlarm(formats strfmt.Registry) error {
	if swag.IsZero(m.InspectionAlarm) { // not required
		return nil
	}

	if m.InspectionAlarm != nil {
		if err := m.InspectionAlarm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inspectionAlarm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inspectionAlarm")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsGetAlarmStatusResponse) validateNodeID(formats strfmt.Registry) error {

	if err := validate.Required("nodeId", "body", m.NodeID); err != nil {
		return err
	}

	if err := validate.FormatOf("nodeId", "body", "uuid", m.NodeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ModelsGetAlarmStatusResponse) validateOverallAlarm(formats strfmt.Registry) error {
	if swag.IsZero(m.OverallAlarm) { // not required
		return nil
	}

	if m.OverallAlarm != nil {
		if err := m.OverallAlarm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overallAlarm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("overallAlarm")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsGetAlarmStatusResponse) validateRateOfChangeAlarm(formats strfmt.Registry) error {
	if swag.IsZero(m.RateOfChangeAlarm) { // not required
		return nil
	}

	if m.RateOfChangeAlarm != nil {
		if err := m.RateOfChangeAlarm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rateOfChangeAlarm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rateOfChangeAlarm")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsGetAlarmStatusResponse) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.MinimumInt("status", "body", int64(*m.Status), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("status", "body", int64(*m.Status), 4, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this models get alarm status response based on the context it is used
func (m *ModelsGetAlarmStatusResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBandAlarms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalAlarm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHalAlarms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInspectionAlarm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverallAlarm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRateOfChangeAlarm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsGetAlarmStatusResponse) contextValidateBandAlarms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BandAlarms); i++ {

		if m.BandAlarms[i] != nil {
			if err := m.BandAlarms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bandAlarms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bandAlarms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsGetAlarmStatusResponse) contextValidateExternalAlarm(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternalAlarm != nil {
		if err := m.ExternalAlarm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalAlarm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("externalAlarm")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsGetAlarmStatusResponse) contextValidateHalAlarms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HalAlarms); i++ {

		if m.HalAlarms[i] != nil {
			if err := m.HalAlarms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("halAlarms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("halAlarms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsGetAlarmStatusResponse) contextValidateInspectionAlarm(ctx context.Context, formats strfmt.Registry) error {

	if m.InspectionAlarm != nil {
		if err := m.InspectionAlarm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inspectionAlarm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inspectionAlarm")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsGetAlarmStatusResponse) contextValidateOverallAlarm(ctx context.Context, formats strfmt.Registry) error {

	if m.OverallAlarm != nil {
		if err := m.OverallAlarm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overallAlarm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("overallAlarm")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsGetAlarmStatusResponse) contextValidateRateOfChangeAlarm(ctx context.Context, formats strfmt.Registry) error {

	if m.RateOfChangeAlarm != nil {
		if err := m.RateOfChangeAlarm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rateOfChangeAlarm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rateOfChangeAlarm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsGetAlarmStatusResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsGetAlarmStatusResponse) UnmarshalBinary(b []byte) error {
	var res ModelsGetAlarmStatusResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
