// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsHALAlarm models h a l alarm
//
// swagger:model models.HALAlarm
type ModelsHALAlarm struct {

	// bearing
	Bearing *ModelsBearing `json:"bearing,omitempty"`

	// hal alarm type
	// Enum: [GLOBAL FREQUENCY]
	HalAlarmType string `json:"halAlarmType,omitempty"`

	// label
	// Required: true
	Label string `json:"label"`

	// upper alert
	UpperAlert *float64 `json:"upperAlert,omitempty"`

	// upper danger
	UpperDanger *float64 `json:"upperDanger,omitempty"`
}

// Validate validates this models h a l alarm
func (m *ModelsHALAlarm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBearing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHalAlarmType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsHALAlarm) validateBearing(formats strfmt.Registry) error {
	if swag.IsZero(m.Bearing) { // not required
		return nil
	}

	if m.Bearing != nil {
		if err := m.Bearing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bearing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bearing")
			}
			return err
		}
	}

	return nil
}

var modelsHALAlarmTypeHalAlarmTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GLOBAL","FREQUENCY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelsHALAlarmTypeHalAlarmTypePropEnum = append(modelsHALAlarmTypeHalAlarmTypePropEnum, v)
	}
}

const (

	// ModelsHALAlarmHalAlarmTypeGLOBAL captures enum value "GLOBAL"
	ModelsHALAlarmHalAlarmTypeGLOBAL string = "GLOBAL"

	// ModelsHALAlarmHalAlarmTypeFREQUENCY captures enum value "FREQUENCY"
	ModelsHALAlarmHalAlarmTypeFREQUENCY string = "FREQUENCY"
)

// prop value enum
func (m *ModelsHALAlarm) validateHalAlarmTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, modelsHALAlarmTypeHalAlarmTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ModelsHALAlarm) validateHalAlarmType(formats strfmt.Registry) error {
	if swag.IsZero(m.HalAlarmType) { // not required
		return nil
	}

	// value enum
	if err := m.validateHalAlarmTypeEnum("halAlarmType", "body", m.HalAlarmType); err != nil {
		return err
	}

	return nil
}

func (m *ModelsHALAlarm) validateLabel(formats strfmt.Registry) error {

	if err := validate.RequiredString("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this models h a l alarm based on the context it is used
func (m *ModelsHALAlarm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBearing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsHALAlarm) contextValidateBearing(ctx context.Context, formats strfmt.Registry) error {

	if m.Bearing != nil {
		if err := m.Bearing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bearing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bearing")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsHALAlarm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsHALAlarm) UnmarshalBinary(b []byte) error {
	var res ModelsHALAlarm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
