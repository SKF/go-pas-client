// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelsBandAlarm models band alarm
//
// swagger:model models.BandAlarm
type ModelsBandAlarm struct {

	// label
	// Example: 10x RPM
	Label string `json:"label,omitempty"`

	// max frequency
	MaxFrequency *ModelsBandAlarmFrequency `json:"maxFrequency,omitempty"`

	// min frequency
	MinFrequency *ModelsBandAlarmFrequency `json:"minFrequency,omitempty"`

	// overall threshold
	OverallThreshold *ModelsBandAlarmOverallThreshold `json:"overallThreshold,omitempty"`
}

// Validate validates this models band alarm
func (m *ModelsBandAlarm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverallThreshold(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsBandAlarm) validateMaxFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxFrequency) { // not required
		return nil
	}

	if m.MaxFrequency != nil {
		if err := m.MaxFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxFrequency")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsBandAlarm) validateMinFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.MinFrequency) { // not required
		return nil
	}

	if m.MinFrequency != nil {
		if err := m.MinFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minFrequency")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsBandAlarm) validateOverallThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.OverallThreshold) { // not required
		return nil
	}

	if m.OverallThreshold != nil {
		if err := m.OverallThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overallThreshold")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("overallThreshold")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this models band alarm based on the context it is used
func (m *ModelsBandAlarm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMaxFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMinFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverallThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsBandAlarm) contextValidateMaxFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxFrequency != nil {
		if err := m.MaxFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxFrequency")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsBandAlarm) contextValidateMinFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.MinFrequency != nil {
		if err := m.MinFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minFrequency")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsBandAlarm) contextValidateOverallThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.OverallThreshold != nil {
		if err := m.OverallThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overallThreshold")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("overallThreshold")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsBandAlarm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsBandAlarm) UnmarshalBinary(b []byte) error {
	var res ModelsBandAlarm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
