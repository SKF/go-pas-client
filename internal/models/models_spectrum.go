// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsSpectrum models spectrum
//
// swagger:model models.Spectrum
type ModelsSpectrum struct {

	// RPM
	// Example: 1600
	// Required: true
	Speed *float64 `json:"speed"`

	// x unit
	// Example: ms
	// Required: true
	XUnit *string `json:"xUnit"`

	// y unit
	// Example: mm/s
	// Required: true
	YUnit *string `json:"yUnit"`
}

// Validate validates this models spectrum
func (m *ModelsSpectrum) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsSpectrum) validateSpeed(formats strfmt.Registry) error {

	if err := validate.Required("speed", "body", m.Speed); err != nil {
		return err
	}

	return nil
}

func (m *ModelsSpectrum) validateXUnit(formats strfmt.Registry) error {

	if err := validate.Required("xUnit", "body", m.XUnit); err != nil {
		return err
	}

	return nil
}

func (m *ModelsSpectrum) validateYUnit(formats strfmt.Registry) error {

	if err := validate.Required("yUnit", "body", m.YUnit); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models spectrum based on context it is used
func (m *ModelsSpectrum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsSpectrum) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsSpectrum) UnmarshalBinary(b []byte) error {
	var res ModelsSpectrum
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
